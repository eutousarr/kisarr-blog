generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String? @db.VarChar(255)
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @unique
  photo     String?
  sexe      SEXE?   @default(Homme)
  age       Int?
  adresse   String? @db.VarChar(255)
  telephone String?
}

enum SEXE {
  Femme
  Homme
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  prenom  String?
  nom     String?
  invoices          Invoice[] @relation("UserInvoices")
  posts   Post[]
  profile Profile?
}


model Invoice {
  id            String        @id
  name          String
  issuerName    String        @default("")
  issuerAddress String        @default("")
  clientName    String        @default("")
  clientAddress String        @default("")
  invoiceDate   String        @default("")
  dueDate       String        @default("")
  vatActive     Boolean       @default(false)
  vatRate       Float         @default(20)
  status        Int           @default(1)
  lines         InvoiceLine[] @relation("InvoiceLines")
  userId        Int
  createdById   User          @relation("UserInvoices", fields: [userId], references: [id])
}

model InvoiceLine {
  id          String   @id @default(uuid())
  description String   @default("")
  quantity    Int      @default(0)
  unitPrice   Float    @default(0)
  invoiceId   String?
  invoice     Invoice? @relation("InvoiceLines", fields: [invoiceId], references: [id], onDelete: Cascade)
}
